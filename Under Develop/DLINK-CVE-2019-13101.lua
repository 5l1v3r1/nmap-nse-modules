---
-- Nmap NSE DLINK-CVE-2019-13101.nse - Version 1.6
-- Copy to: /usr/share/nmap/scripts/DLINK-CVE-2019-13101.nse
-- Update NSE database: sudo nmap --script-updatedb
-- execute: nmap --script-help DLINK-CVE-2019-13101.nse
-- Port(s) accepted by this nse: 80,443,8080-8082
---

-- SCRIPT BANNER DESCRIPTION --
description = [[

Module Author: r00t-3xp10it {Disclosure = Devendra Singh}
Detects whether the D-Link DIR-600 or DIR-615 router is vulnerable to Incorrect Access Control Vulnerability (CVE-2019-13101).
A remote vulnerability was discovered on D-Link DIR-600 Wireless N 150 Home Router in multiple respective firmware versions
(3.02 up to 3.06). The vulnerability provides unauthenticated remote access to the routers WAN configuration page i.e. '/wan.htm'
which leads to disclosure of sensitive user info about the WAN, including but not limited to PPPoE, DNS configuration etc.

Some Syntax examples:
nmap --script-help DLINK-CVE-2019-13101.nse
nmap -sV -Pn -n -p 80,443,8080 --open --script DLINK-CVE-2019-13101.nse 37.99.213.95
nmap -sV -Pn -n -p 80,443 --open --script DLINK-CVE-2019-13101.nse --script-args "verbose=true" 37.99.213.95
nmap -sV -Pn -n -p 80,443,8080-8082 --open --script DLINK-CVE-2019-13101.nse --script-args "uri=/" 37.99.213.95
nmap -sS -Pn -p 80 --open --script DLINK-CVE-2019-13101.nse --script-args "agent=Apache-HttpClient/4.0.3,verbose=true" 37.99.213.95
nmap -sS -v -Pn -n -T4 -iR 800 -p 80,443,8080-8082 --open --script=http-headers.nse,DLINK-CVE-2019-13101.nse --script-args "verbose=true"

]]

---
-- @usage:
-- nmap --script-help DLINK-CVE-2019-13101.nse
-- nmap -sV -Pn -n -p 80,443,8080 --open --script DLINK-CVE-2019-13101.nse 37.99.213.95
-- nmap -sV -Pn -n -p 80,443 --open --script DLINK-CVE-2019-13101.nse --script-args "verbose=true" 37.99.213.95
-- nmap -sV -Pn -n -p 80,443,8080-8082 --open --script DLINK-CVE-2019-13101.nse --script-args "uri=/" 37.99.213.95
-- nmap -sS -Pn -p 80 --open --script DLINK-CVE-2019-13101.nse --script-args "agent=Apache-HttpClient/4.0.3,verbose=true" 37.99.213.95
-- nmap -sS -v -Pn -n -T4 -iR 800 -p 80,443,8080-8082 --open --script=http-headers.nse,DLINK-CVE-2019-13101.nse --script-args "verbose=true"
-- @output
-- PORT     STATE SERVICE  VERSION
-- 443/tcp open  http  D-Link DIR-600 WAP http config 2.17
-- | DLINK-CVE-2019-13101:
-- |   VULNERABLE:
-- |   D-Link DIR-600/615 Wireless Home Router
-- |   State: VULNERABLE
-- |   Risk Factor: Medium
-- |     A remote vulnerability was discovered on D-Link DIR-600M/DIR-615 Wireless Home Router in multiple respective firmware versions (3.02 up to 3.06). The vulnerability provides unauthenticated remote access to the routers WAN configuration page i.e. '/wan.htm', which leads to disclosure of sensitive user info about the WAN, including but not limited to PPPoE, DNS configuration etc, also allowing to change the configuration settings.
-- |
-- |   Referencies:
-- |     https://nvd.nist.gov/vuln/detail/CVE-2019-13101
-- |     https://www.cybersecurity-help.cz/vdb/SB2019081001
-- |_
-- @args payload.uri The path name to search. Default: /wan.htm
-- @args payload.verbose Display More verbose outputs - Default: false
-- @args payload.agent User-agent to send in request - Default: iPhone,safari
---

author = "r00t-3xp10it"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"save", "vuln"}


-- DEPENDENCIES (lua nse libs) --
local http = require "http"
local table = require "table"
local vulns = require "vulns"
local stdnse = require "stdnse"
local string = require "string"
local shortport = require "shortport"


-- THE RULE SECTION --
portrule = shortport.port_or_service({80, 443, 8080, 8081, 8082}, "http, http-proxy, https, https-simple-new", "tcp", "open")
local verbose = stdnse.get_script_args(SCRIPT_NAME..".verbose") or "false"
local uri = stdnse.get_script_args(SCRIPT_NAME..".uri") or "/wan.htm"
local uri_found, version_match, why


-- THE ACTION SECTION --
action = function(host, port)
-- Manipulate TCP packet 'header' with false information about attacker :D
local _decoy = {header={}}   --> manipulate 'header' request ..
_decoy['header']['User-Agent'] = stdnse.get_script_args(SCRIPT_NAME..".agent") or "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1" --> use iPhone,safari User-agent OR your own...
_decoy['header']['Accept-Language'] = "en-GB,en;q=0.8,sv" --> use en-GB as attacker default install language
_decoy['header']['Cache-Control'] = "no-store" -->  Instruct webserver to not write it to disk (do not to cache it)


-- Make sure that uri respondes with 200 [OK] {no redirection|no_cache}
local response = http.get(host, port, uri, { redirect_ok = false, no_cache = true })
if (response.status == 200) then
   uri_found = "true"
else
   uri_found = "false"
end


-- Table of (arrays) DLINK vulnerable version(s)
-- NOTE: vuln_table = { Linux, HTTP/1.1, DIR-600 Ver 2.17 } => ITS NOT VULN (Used For Debug tasks).
vuln_table = {"Linux, HTTP/1.1, DIR-600 Ver 2.17", "Linux, HTTP/1.1, DIR-600 Ver 3.02", "Linux, HTTP/1.1, DIR-600 Ver 3.03", " Linux, HTTP/1.1, DIR-600 Ver 3.04", "Linux, HTTP/1.1, DIR-600 Ver 3.05", "Linux, HTTP/1.1, DIR-600 Ver 3.06", "Linux, HTTP/1.1, DIR-615 Ver 3.02", "Linux, HTTP/1.1, DIR-615 Ver 3.03", "Linux, HTTP/1.1, DIR-615 Ver 3.04", "Linux, HTTP/1.1, DIR-615 Ver 3.05", "Linux, HTTP/1.1, DIR-615 Ver 3.06"}
-- Loop through {vuln_table} to find a match to header['server']
local header_server = response.header and response.header['server'] or ""
for i, vuln_version in pairs(vuln_table) do
   if (header_server == vuln_version) then
      version_match = "true"
      break
   else
      version_match = "false"
   end
end


-- Build vulnerable {table}
local vuln_table = {
   title = "D-Link DIR-600/615 Wireless Home Router",
   state = vulns.STATE.NOT_VULN,
   risk_factor = "Medium",
   description = [[
A remote vulnerability was discovered on D-Link DIR-600M/DIR-615 Wireless Home Router in multiple respective firmware versions (3.02 up to 3.06). The vulnerability provides unauthenticated remote access to the routers WAN configuration page i.e. '/wan.htm', which leads to disclosure of sensitive user info about the WAN, including but not limited to PPPoE, DNS configuration etc, also allowing to change the configuration settings.
]],
   references = {
     'https://nvd.nist.gov/vuln/detail/CVE-2019-13101',
     'https://www.cybersecurity-help.cz/vdb/SB2019081001',
   }
}


-- Final checks (uri_found|version_match|title_match)
response = http.get(host, port, uri, _decoy)
local title = "D-LINK SYSTEMS, INC. | WIRELESS ROUTER | HOME"
   if (uri_found == "false") then
      if (verbose == "true") then
         return "\n  D-Link DIR-600/615 Wireless Home Router\n  State: NOT VULNERABLE to CVE-2019-13101\n    Reason: ["..response.status.."] Uri Not Found on Response\n\n"
      end
  elseif (version_match == "false") then
      if (verbose == "true") then
         return "\n  D-Link DIR-600/615 Wireless Home Router\n  State: NOT VULNERABLE to CVE-2019-13101\n    Reason: [404] Not Vuln Server Version\n\n"
      end
   elseif not (response.body:match(title)) then
      if (verbose == "true") then
         return "\n  D-Link DIR-600/615 Wireless Home Router\n  State: NOT VULNERABLE to CVE-2019-13101\n    Reason: [404] None Match Title Found\n\n"
      end
   elseif (response.body == "" or response.body == nil) then
      if (verbose == "true") then
         return "\n  D-Link DIR-600/615 Wireless Home Router\n  State: NOT VULNERABLE to CVE-2019-13101\n    Reason: [404] Response Body Not Found\n\n"
      end
   elseif (uri_found == "true" and version_match == "true" and response.body:match(title) or response.body:match("PPPoE")) then
         vuln_table.state = vulns.STATE.VULN
         local report = vulns.Report:new(SCRIPT_NAME, host, port)
         return report:make_output(vuln_table)
   else
      if (verbose == "true") then
         return "\n  D-Link DIR-600/615 Wireless Home Router\n  State: NOT VULNERABLE to CVE-2019-13101\n    Reason: ["..response.status.."] Server Uknwon Response\n\n"
      end
   end
end

