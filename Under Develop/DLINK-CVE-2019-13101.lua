---
-- Nmap NSE DLINK-CVE-2019-13101.nse - Version 1.3
-- Copy to: /usr/share/nmap/scripts/DLINK-CVE-2019-13101.nse
-- Update NSE database: sudo nmap --script-updatedb
-- execute: nmap --script-help DLINK-CVE-2019-13101.nse
-- Port(s) accepted by this nse: 80,443,8080-8082
---

-- SCRIPT BANNER DESCRIPTION --
description = [[

Module Author: r00t-3xp10it {Disclosure = Devendra Singh}
Detects whether the D-Link DIR-600M or DIR-615 router is vulnerable to Incorrect Access Control Vulnerability (CVE-2019-13101).
A remote vulnerability was discovered on D-Link DIR-600M Wireless N 150 Home Router in multiple respective firmware versions
(3.02, 3.03, 3.04, and 3.06). The vulnerability provides unauthenticated remote access to the routers WAN configuration page
i.e. '/wan.htm', which leads to disclosure of sensitive user info including but not limited to PPPoE, DNS configuration etc.

Some Syntax examples:
nmap --script-help DLINK-CVE-2019-13101.nse
nmap -sV -Pn -n -p 80,443,8080 --open --script DLINK-CVE-2019-13101.nse 37.99.213.95
nmap -sV -Pn -n -p 80,443 --open --script DLINK-CVE-2019-13101.nse --script-args "verbose=true" 37.99.213.95
nmap -sV -Pn -n -p 80,443,8080-8082 --open --script DLINK-CVE-2019-13101.nse --script-args "uri=/" 37.99.213.95
nmap -sS -Pn -p 80 --open --script DLINK-CVE-2019-13101.nse --script-args "agent=Apache-HttpClient/4.0.3,verbose=true" 37.99.213.95
nmap -sS -v -Pn -n -T4 -iR 800 -p 80,443,8080-8082 --open --script=http-headers.nse,DLINK-CVE-2019-13101.nse --script-args "verbose=true"

]]

---
-- @usage:
-- nmap --script-help DLINK-CVE-2019-13101.nse
-- nmap -sV -Pn -n -p 80-81,8080 --open --script DLINK-CVE-2019-13101.nse 223.7.230.27
-- nmap -sV -Pn -n -p 80-81,445,8080 --open --script DLINK-CVE-2019-13101.nse --script-args "uri=/wan.htm" 37.99.213.95
-- nmap -sS -Pn -p 80 --open --script DLINK-CVE-2019-13101.nse --script-args "agent=Apache-HttpClient/4.0.3,verbose=true" 37.99.213.95
-- nmap -sS -v -Pn -n -T4 -iR 700 -p 80-81,8080 --open --script DLINK-CVE-2019-13101.nse --script-args "verbose=true" -D 65.49.82.3
-- @output
-- PORT     STATE SERVICE  VERSION
-- 443/tcp open  http  D-Link DIR-600 WAP http config 2.17
-- | DLINK-CVE-2019-13101:
-- |   Title: D-Link DIR-600M Wireless Home Router
-- |   State: VULNERABLE to CVE-2019-13101
-- |   Risk Factor: 5.9 Medium
-- |
-- |     Description: A remote vulnerability was discovered on D-Link DIR-600M/615 Wireless Home Router in multiple
-- |      respective firmware versions (3.02, 3.03, 3.04, and 3.06). The vulnerability provides unauthenticated remote
-- |      access to the routers WAN configuration page i.e. 'wan.htm', which leads to disclosure of sensitive user info
-- |      including but not limited to PPPoE, DNS configuration etc, also allowing to change the configuration settings.
-- |
-- |   Referencies:
-- |    https://nvd.nist.gov/vuln/detail/CVE-2019-13101
-- |    https://www.cybersecurity-help.cz/vdb/SB2019081001
-- |_
-- @args payload.uri The path name to search. Default: /wan.htm
-- @args payload.verbose Display More verbose outputs - Default: false
-- @args payload.agent User-agent to send in request - Default: iPhone,safari
---

author = "r00t-3xp10it"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"save", "vuln"}


-- DEPENDENCIES (lua nse libs) --
local http = require "http"
local table = require "table"
local stdnse = require "stdnse"
local string = require "string"
local shortport = require "shortport"


-- THE RULE SECTION --
portrule = shortport.port_or_service({80, 443, 8080, 8081, 8082}, "http, http-proxy, https, https-simple-new", "tcp", "open")
local uri = stdnse.get_script_args(SCRIPT_NAME..".uri") or "/wan.htm"
local verbose = stdnse.get_script_args(SCRIPT_NAME..".verbose") or "false"
local vuln_description = "A remote vulnerability was discovered on D-Link DIR-600M/615 Wireless Home Router in multiple\n   respective firmware versions. The vulnerability provides unauthenticated remote access to the routers WAN\n   configuration page i.e. '/wan.htm', which leads to disclosure of sensitive user information including but\n   not limited to PPPoE, DNS configuration etc, also allowing to change the configuration settings as well.\n\n"
local vuln_referencies = "\n https://nvd.nist.gov/vuln/detail/CVE-2019-13101\n https://www.cybersecurity-help.cz/vdb/SB2019081001\n\n"


-- THE ACTION SECTION --
action = function(host, port)
-- Manipulate TCP packet 'header' with false information about attacker :D
local _decoy = {header={}}   --> manipulate 'header' request ..
_decoy['header']['User-Agent'] = stdnse.get_script_args(SCRIPT_NAME..".agent") or "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1" --> use iPhone,safari User-agent OR your own...
_decoy['header']['Accept-Language'] = "en-GB,en;q=0.8,sv" --> use en-GB as attacker default install language
_decoy['header']['Cache-Control'] = "no-store" -->  Instruct webserver to not write it to disk (do not to cache it)


local uri_found, version_match
-- Make sure that uri respondes 200 [OK]
local res = http.get(host, port, uri)
if (res.status == 200) then
   uri_found = "true"
else
   uri_found = "false"
end

local header_server = res.header and res.header['server'] or "" --> [debug sting]
-- Table of (arrays) DLINK vulnerable version(s) [NOTE: DIR-600 Ver 2.17 - its not vuln (debug string)]
vuln_table = {"Linux, HTTP/1.1, DIR-600 Ver 2.17", "Linux, HTTP/1.1, DIR-600 Ver 3.02", "Linux, HTTP/1.1, DIR-600 Ver 3.03", " Linux, HTTP/1.1, DIR-600 Ver 3.04", "Linux, HTTP/1.1, DIR-600 Ver 3.05", "Linux, HTTP/1.1, DIR-600 Ver 3.06", "Linux, HTTP/1.1, DIR-615 Ver 3.02", "Linux, HTTP/1.1, DIR-615 Ver 3.03", "Linux, HTTP/1.1, DIR-615 Ver 3.04", "Linux, HTTP/1.1, DIR-615 Ver 3.05", "Linux, HTTP/1.1, DIR-615 Ver 3.06"}
-- Loop through {vuln_table} to find a match ['header_server']
for i, vuln_version in pairs(vuln_table) do
   if (header_server == vuln_version) then
      -- print("[+] HEADER_VERSION: "..header_server.." <=> TABLE_VERSION: "..vuln_version) --> [debug sting]
      version_match = "true"
      break
   else
      -- print("[x] HEADER_VERSION: "..header_server.." <=> TABLE_VERSION: "..vuln_version) --> [debug sting]
      version_match = "false"
   end
end


local tbl = {}
local response = http.get(host, port, uri, _decoy)
local title = "D-LINK SYSTEMS, INC. | WIRELESS ROUTER | HOME"
-- <title>D-LINK SYSTEMS, INC. | WIRELESS ROUTER | HOME</title>
   --if (response.body:match(title) or response.body:match("PPPoE")) then --> [debug sting]
   if (uri_found == "true" and version_match == "true" and response.body:match(title)) then
      table.insert(tbl, string.format("Title: D-Link DIR-600M/615 Wireless Home Router\n"))
      table.insert(tbl, string.format("State: VULNERABLE to CVE-2019-13101\n"))
      table.insert(tbl, string.format("Risk Factor: 5.9 Medium\n\n"))
      table.insert(tbl, string.format("  Description: %s", vuln_description))
      table.insert(tbl, string.format("Referencies: %s", vuln_referencies))
      return stdnse.format_output(true, tbl)
   elseif (uri_found == "false") then
      if (verbose == "true") then
         table.insert(tbl, string.format("Title: D-Link DIR-600M/615 Wireless Home Router\n"))
         table.insert(tbl, string.format("State: NOT VULNERABLE to CVE-2019-13101\n"))
         table.insert(tbl, string.format("  Reason: [404] Uri Not Found on Server Response\n\n"))
         return stdnse.format_output(true, tbl)
      end
   elseif (version_match == "false") then
      if (verbose == "true") then
         table.insert(tbl, string.format("Title: D-Link DIR-600M/615 Wireless Home Router\n"))
         table.insert(tbl, string.format("State: NOT VULNERABLE to CVE-2019-13101\n"))
         table.insert(tbl, string.format("  Reason: [404] Not Vulnerable Server Version\n\n"))
         return stdnse.format_output(true, tbl)
      end
   elseif (response.status == 401) then
      if (verbose == "true") then
         table.insert(tbl, string.format("Title: D-Link DIR-600M/615 Wireless Home Router\n"))
         table.insert(tbl, string.format("State: NOT VULNERABLE to CVE-2019-13101\n"))
         table.insert(tbl, string.format("  Reason: [401] Unauthorized Request\n\n"))
         return stdnse.format_output(true, tbl)
      end      
   else
      if (verbose == "true") then
         table.insert(tbl, string.format("Title: D-Link DIR-600M/615 Wireless Home Router\n"))
         table.insert(tbl, string.format("State: NOT VULNERABLE to CVE-2019-13101\n"))
         table.insert(tbl, string.format("  Reason: [%s] \n\n", response.status))
         return stdnse.format_output(true, tbl)
      end
   end
end
